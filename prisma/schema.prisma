// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  clerkId   String   @unique
  name      String?
  bio       String?
  image     String?
  location  String?
  website   String?
  createdAt DateTime @default(now()) // member since date
  updatedAt DateTime @updatedAt

  // Relations
  posts    Post[] // One-to-many relation with Post [This mean s a user can have many posts but a post can only have one author]
  comments Comment[] // One-to-many relation with Comment
  likes    Like[] // One-to-many relation with Like

  followers Follows[] @relation("UserFollowers") // users that follow this user
  following Follows[] @relation("UserFollowing") // users that this user follows

  notifications        Notification[] @relation("userNotifications") // notifications received
  notificationsCreated Notification[] @relation("notificationCreator") // notifications created
}

model Post {
  id        String   @id @default(cuid())
  authorId  String
  content   String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade) // Cascade delete means delete all posts if user is deleted

  comments Comment[]
  likes    Like[]

  notifications Notification[] // notifications related to this post
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime @default(now())

  // Relations
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade) // Cascade delete means delete all comments if user is deleted
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade) // Cascade delete means delete all comments if post is deleted
  notifications Notification[] // notifications related to this comment

  @@index([authorId, postId]) // composite Index for faster lookups
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // ensures a user can like a post only once
  @@index([userId, postId]) // composite Index for faster lookups
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  // Relations
  followers User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId]) // composite primary key to avoid duplicate follows
  @@unique([followerId, followingId]) // ensures a user can follow another user only once
  @@index([followerId, followingId]) // composite index for faster lookups
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  creatorId String
  type      NotificationType
  postId    String?
  commentId String?
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user    User @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade) // who receives the notification
  creator User @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade) // who created the notification

  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade) // optional relation to Post
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade) // optional relation to Comment

  @@index([userId, createdAt]) // index for faster lookups by user and creation date
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}
